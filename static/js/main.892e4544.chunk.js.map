{"version":3,"sources":["assets/refresh.svg","serviceWorker.ts","modules/cat/action-types.ts","modules/cat/actions.ts","modules/cat/selectors.ts","modules/cat/index.tsx","components/App.tsx","modules/cat/reducer.ts","modules/cat/services.ts","modules/cat/saga.ts","redux/index.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","receiveCatSuccess","data","type","actionTypes","receiveCatFailure","getCat","cat","getCatData","createSelector","getCatLoading","loading","getCatUrl","error","url","connect","state","src","onLoadCat","useEffect","className","onClick","aria-label","alt","reloadButton","App","initialState","reducer","actions","fetchCats","a","axios","get","onFetchCat","onFetchCatError","fetchCatSaga","fetchCatErrorSaga","call","response","put","delay","takeLatest","saga","all","sagaMiddleware","createSagaMiddleware","combineReducers","catReducer","composeMiddleware","compose","applyMiddleware","createStore","run","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.892e4544.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/refresh.96fb8799.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const FETCH_CAT = 'cat/FETCH_CAT';\nconst FETCH_CAT_ERROR = 'cat/FETCH_CAT_ERROR';\nconst RECEIVE_CAT_SUCCESS = 'cat/RECEIVE_CAT_SUCCESS';\nconst RECEIVE_CAT_FAILURE = 'cat/RECEIVE_CAT_FAILURE';\n\nexport default {\n  FETCH_CAT,\n  FETCH_CAT_ERROR,\n  RECEIVE_CAT_SUCCESS,\n  RECEIVE_CAT_FAILURE,\n};\n","import actionTypes from './action-types';\n\nexport const fetchCat = () => ({\n  type: actionTypes.FETCH_CAT,\n});\n\nexport const fetchCatError = () => ({\n  type: actionTypes.FETCH_CAT_ERROR,\n});\n\nexport const receiveCatSuccess = (data: any) => ({\n  type: actionTypes.RECEIVE_CAT_SUCCESS,\n  data,\n});\n\nexport const receiveCatFailure = (data: any) => ({\n  type: actionTypes.RECEIVE_CAT_FAILURE,\n  data,\n});\n","import { createSelector } from 'reselect';\n\ntype CatProps = {\n  cat?: any;\n};\n\nconst getCat = ({ cat }: CatProps = {}) => cat;\n\nconst getCatData = createSelector(getCat, ({ data = {} }) => data);\n\nexport const getCatLoading = createSelector(getCat, ({ loading }) => loading);\n\nexport const getCatError = createSelector(getCat, ({ error = '' }) => error);\n\nexport const getCatUrl = createSelector(getCatData, ({ url = '' }) => url);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport { fetchCat } from './actions';\nimport { getCatUrl, getCatLoading } from './selectors';\nimport reloadButton from '../../assets/refresh.svg';\n\ntype CatProps = {\n  loading: boolean;\n  src: string;\n  error?: string;\n  onLoadCat: () => {};\n};\n\nconst Cat: React.FC<CatProps> = ({ loading, error, onLoadCat, src }) => {\n  useEffect(() => {\n    onLoadCat();\n  }, [onLoadCat]);\n\n  return (\n    <div className=\"App\">\n      {loading && <div>Loading...</div>}\n      {!loading && error}\n      {!loading && !error && (\n        <>\n          <button onClick={onLoadCat} aria-label=\"Load Cat\">\n            <img alt=\"Load Cat\" src={reloadButton}></img>\n          </button>\n          <img src={src} alt=\"Cat pic\" />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default connect(\n  state => ({\n    loading: getCatLoading(state),\n    src: getCatUrl(state),\n  }),\n  {\n    onLoadCat: fetchCat,\n  },\n)(Cat);\n","import React from 'react';\nimport Cat from '../modules/cat';\n\nconst App = () => (\n  <div>\n    <Cat />\n  </div>\n);\nexport default App;\n","import actions from './action-types';\n\nexport type CatStateProp = {\n  data: any;\n  error: any;\n  loading: boolean;\n};\n\nexport type CatActionProp = {\n  type: string;\n  data: any;\n  error: any;\n};\n\nconst initialState: CatStateProp = { data: {}, error: null, loading: false };\n\nconst reducer = (\n  state = initialState,\n  { type, data, error }: CatActionProp,\n) => {\n  switch (type) {\n    case actions.FETCH_CAT:\n    case actions.FETCH_CAT_ERROR:\n      return {\n        ...state,\n        error: null,\n        loading: true,\n      };\n    case actions.RECEIVE_CAT_SUCCESS:\n      return {\n        ...state,\n        data,\n        error: null,\n        loading: false,\n      };\n    case actions.RECEIVE_CAT_FAILURE:\n      return {\n        ...state,\n        data: {},\n        error,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import axios from 'axios';\n\nexport const fetchCats = async (url: string) => {\n  return await axios.get(url);\n};\n","import { takeLatest, put, call, delay } from 'redux-saga/effects';\n\nimport actions from './action-types';\nimport { receiveCatFailure, receiveCatSuccess } from './actions';\nimport { fetchCats } from './services';\n\nfunction* onFetchCat() {\n  try {\n    const response = yield call(\n      fetchCats,\n      'https://api.thecatapi.com/v1/images/search',\n    );\n\n    yield put(receiveCatSuccess(response.data[0]));\n  } catch (e) {\n    yield put(receiveCatFailure(e));\n  }\n}\n\nexport function* onFetchCatError() {\n  try {\n    // API Request\n    yield delay(1000);\n\n    const response = yield call(\n      fetchCats,\n      'https://api.thecatapi.com/v1/images',\n    );\n\n    yield put(receiveCatSuccess(response.data[0]));\n  } catch (e) {\n    yield put(receiveCatFailure('There was a problem fetching a cat.'));\n  }\n}\n\nexport function* fetchCatSaga() {\n  yield takeLatest(actions.FETCH_CAT, onFetchCat);\n}\n\nexport function* fetchCatErrorSaga() {\n  yield takeLatest(actions.FETCH_CAT_ERROR, onFetchCatError);\n}\n","import createSagaMiddleware from 'redux-saga';\nimport { all } from 'redux-saga/effects';\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport catReducer from '../modules/cat/reducer';\nimport { fetchCatSaga, fetchCatErrorSaga } from '../modules/cat/saga';\n\nfunction* saga() {\n  yield all([fetchCatSaga(), fetchCatErrorSaga()]);\n}\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst reducer = combineReducers({\n  cat: catReducer,\n});\n\nconst composeMiddleware = compose(applyMiddleware(sagaMiddleware));\n\nexport default createStore(reducer, composeMiddleware);\n\nsagaMiddleware.run(saga);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App';\nimport store from './redux';\n\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}